version: 2

references:

base_image: &base_image
  hashicorp/terraform:light

working_directory: &working_directory
  ~/github/SecDevOps/circleci_terraform

gitclone_dir: &gitclone_dir
  ~/github/SecDevOps/

default_config: &default_config
  docker:
    - image: *base_image
  working_directory: *working_directory
  environment:
    BASH_ENV: /root/.bashrc

repo_cache_key: &repo_cache_key
  v1-repo-{{ .Branch }}-{{ .Revision }}

# Step to restore repository from cache
restore_repo: &restore_repo
  restore_cache:
    key: *repo_cache_key

save_repo: &save_repo
  save_cache:
    key: *repo_cache_key
    paths:
      - *working_directory

set_terraform_environment: &set_terraform_environment
  run:
    name: set terraform environment
    command: |
      cd && touch $BASH_ENV
      apk add bash
      if [ "${CIRCLE_BRANCH}" == "master" ]; then
        echo 'export TERRAFORM_ENVIRONMENT=production' >> $BASH_ENV
      else
        echo 'export TERRAFORM_ENVIRONMENT=staging' >> $BASH_ENV
      fi

terraform_init: &terraform_init
  run:
    name: terraform init
    command: |
      source $BASH_ENV
      cd environments/$TERRAFORM_ENVIRONMENT
      terraform init

alpine_setup: &alpine_setup
  run:
    name: alpine_setup
    command: |
      apk update
      apk upgrade
      apk add curl wget bash git
      apk add ruby ruby-bundler
      apk add ruby ruby-dev make gcc libc-dev g++ python python-dev py-pip build-base ruby-rdoc
      pip install awscli
      apk --purge -v del py-pip
      rm -rf /var/cache/apk/*
      cd ~/github/SecDevOps
      git clone https://github.com/inspec/inspec.git
      cd inspec
      gem build inspec.gemspec
      gem install inspec-*.gem
      bundle install
      echo "checking for directory..."



apply_job: &apply_job
  <<: *default_config
  steps:
    - *restore_repo
    - *set_terraform_environment
    - *terraform_init
    - *alpine_setup
    - attach_workspace:
        at: *working_directory
    - run:
        name: terraform apply
        command: |
          source $BASH_ENV
          cd keys
          echo '-----BEGIN RSA PRIVATE KEY-----' > circleci_terraform
          echo $AWS_SSH_KEY | sed -e 's/\s\+/\n/g' >> circleci_terraform
          echo '-----END RSA PRIVATE KEY-----' >> circleci_terraform
          chmod 700 circleci_terraform
          cd ../environments/$TERRAFORM_ENVIRONMENT
          terraform apply --auto-approve ../../terraform.plan
          terraform output -json > /tmp/output.json
          mv circleci_terraform .circleci_terraform
          aws s3 ls s3://state-file-bucket
          if [ $? -eq 0 ]; then
            aws s3 rm s3://state-file-bucket
          fi
    - run:
        name: Inspec the AWS assets
        command: |
          cat /tmp/output.json
          mkdir aws-security/files || true
          mkdir /tmp/test-results || true
          cp /tmp/output.json aws-security/files/output.json
          inspec detect -t aws://
          inspec exec aws-security --reporter=cli junit:/tmp/test-results/inspec-junit.xml -t aws://us-west-2
    - store_test_results:
        path: /tmp/test-results
    - run:
        name: Delete Terraform Assets
        when: on_fail
        command: |
          source $BASH_ENV
          cd environments/$TERRAFORM_ENVIRONMENT
          terraform destroy -force
          aws s3 rm s3://state-file-bucket


jobs:

  build:
    <<: *default_config
    steps:
      - checkout
      - *set_terraform_environment
      - run:
          name: terraform format (fmt) check
          command: |
            source $BASH_ENV
            cd environments/$TERRAFORM_ENVIRONMENT

            if [ $(terraform fmt | grep -v .terraform | tee fmt_result.txt | wc -l) -gt 1 ]; then
              echo "Format of this terraform files is not appropiate:"
              echo
              cat fmt_result.txt
              rm fmt_result.txt
              git checkout -- .

              echo
              echo "Please run terraform fmt"

              exit 1
            fi
      - *save_repo

  plan:
    <<: *default_config
    steps:
      - *restore_repo
      - *set_terraform_environment
      - *terraform_init
      - run:
          name: terraform plan
          command: |
            source $BASH_ENV
            cd keys
            echo '-----BEGIN RSA PRIVATE KEY-----' > circleci_terraform
            echo $AWS_SSH_KEY | sed -e 's/\s\+/\n/g' >> circleci_terraform
            echo '-----END RSA PRIVATE KEY-----' >> circleci_terraform
            chmod 700 circleci_terraform
            cd ../environments/$TERRAFORM_ENVIRONMENT
            terraform init
            terraform plan -out=../../terraform.plan
      - persist_to_workspace:
          root: *working_directory
          paths:
            - terraform.plan

  apply:
    <<: *apply_job

  apply-with-approval:
    <<: *apply_job




workflows:
  version: 2
  build_plan_approve_apply:
    jobs:
      - build
      - plan:
          requires:
            - build
      - approve:
          type: approval
          requires:
            - plan
          filters:
            branches:
              only: master
      - apply-with-approval:
          requires:
            - approve
          filters:
            branches:
              only: master
      - apply:
          requires:
            - plan
          filters:
            branches:
              only: stage
